name: CI/CD for Dockerized Flask Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build the Docker Image
      run: |
        docker build . --file Dockerfile --tag flask-app-2:$(date +%Y%m%d%H%M%S)

  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # pip install -r requirements.txt
          pip install flask pytest

      - name: Run tests
        run: |
          pytest

  build-and-publish:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

      - name: Image digest
        id: image_digest
        run: echo "IMAGE_DIGEST=${{ steps.build-and-publish.outputs.digest }}" >> $GITHUB_ENV

      # - name: Notify deployment
      #   run: |
      #     echo "Deployment triggered for image: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest"
      #     # Here you can add a step to notify your deployment service or send a message to a chat service
      #     # e.g., curl -X POST -H "Content-Type: application/json" -d '{"text": "New image deployed!"}' https://your-webhook-url
